Step 1: Install R and RStudio
Download and Install R:
Navigate to CRAN and download the latest version of R for your operating system.
Follow the installation instructions.
Download and Install RStudio:
Go to RStudio's website and download RStudio Desktop (Open Source Edition).
Install RStudio following the provided instructions.

=======================================================================================================================================================================================================================================================================================================================================================

# Install necessary packages
if (!requireNamespace("tidyverse", quietly = TRUE)) install.packages("tidyverse")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("car", quietly = TRUE)) install.packages("car")
if (!requireNamespace("corrplot", quietly = TRUE)) install.packages("corrplot")
if (!requireNamespace("leaps", quietly = TRUE)) install.packages("leaps")
if (!requireNamespace("lubridate", quietly = TRUE)) install.packages("lubridate")
if (!requireNamespace("GGally", quietly = TRUE)) install.packages("GGally")

# Load Libraries
library(tidyverse)
library(ggplot2)
library(car)  # For VIF
library(corrplot)  # For correlation visualization
library(leaps)  # For model selection
library(lubridate)  # For date manipulation
library(GGally)  # For ggpairs plot

# Load Data
sales_data <- read.csv("sales_data.csv")
customer_data <- read.csv("customer_data.csv")
marketing_data <- read.csv("marketing_data.csv")

# Merge Data
merged_data <- sales_data %>%
  left_join(customer_data, by = "customer_id") %>%
  left_join(marketing_data, by = "transaction_id")

# Convert date strings to date objects for time-based analysis
merged_data$transaction_date <- as.Date(merged_data$transaction_date, format = "%Y-%m-%d")

# Feature Engineering
merged_data <- merged_data %>%
  mutate(
    month = month(transaction_date),
    day_of_week = wday(transaction_date, label = TRUE),
    is_weekend = day_of_week %in% c("Sat", "Sun")
  )

# Basic Descriptive Statistics
summary_stats <- summary(merged_data)
print(summary_stats)

# Check for Missing Values
print(sapply(merged_data, function(x) sum(is.na(x))))

# Deal with Missing Data (e.g., imputation or removal)
merged_data <- na.omit(merged_data)  # Remove rows with NA

### **Step 3: Exploratory Data Analysis (EDA)**

# Correlation Analysis
numeric_vars <- sapply(merged_data, is.numeric)
cor_matrix <- cor(merged_data[, numeric_vars])
corrplot(cor_matrix, method = "color", type = "upper", order = "hclust", 
         tl.col = "black", tl.srt = 45)

# Pairwise scatterplot matrix
ggpairs(merged_data, columns = c("sales_amount", "promotion_cost", "customer_frequency"))

# Time Series Analysis of Sales
ggplot(merged_data, aes(x = transaction_date, y = sales_amount)) +
  geom_line() +
  geom_smooth(method = "loess", se = FALSE) +
  labs(title = "Sales Over Time", x = "Date", y = "Sales Amount")

# Boxplot for Sales Distribution by Product Category
ggplot(merged_data, aes(x = product_category, y = sales_amount)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Sales Distribution by Product Category", x = "Product Category", y = "Sales Amount")

### **Step 4: Advanced Regression Analysis**

# Stepwise Regression for Feature Selection
best_subset <- regsubsets(sales_amount ~ ., data = merged_data, nvmax = 10, method = "exhaustive")
summary(best_subset)

# Best model from stepwise regression
best_model <- lm(sales_amount ~ ., data = merged_data[, names(coef(best_subset, 5))])

# Diagnostics
par(mfrow = c(2, 2))
plot(best_model)

# Check for Multicollinearity
vif_values <- vif(best_model)
print(vif_values)

# Interaction Terms
model_with_interaction <- update(best_model, . ~ . + promotion_cost:is_weekend)
summary(model_with_interaction)

# Predictive Model for Customer Lifetime Value
customer_data$last_purchase_date <- as.Date(customer_data$last_purchase_date, format = "%Y-%m-%d")
customer_data$days_since_last_purchase <- as.numeric(Sys.Date() - customer_data$last_purchase_date)

clv_model <- lm(clv ~ customer_frequency + total_purchase + days_since_last_purchase, data = customer_data)
summary(clv_model)

### **Step 5: Visualization of Results**

# Visualize Correlation between Sales and Promotion Cost
ggplot(merged_data, aes(x = promotion_cost, y = sales_amount)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Impact of Promotion Cost on Sales", x = "Promotion Cost", y = "Sales Amount")

# Plotting Influence of Marketing Channels
ggplot(merged_data, aes(x = marketing_channel, y = sales_amount, fill = marketing_channel)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Sales by Marketing Channel", y = "Sales Amount", x = "Marketing
